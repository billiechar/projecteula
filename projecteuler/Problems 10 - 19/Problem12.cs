using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace ProjectEuler {
    class Problem12 {
        public static string Name() {
            return "Highly divisible triangular number";
        }

        public static string Description() {
            string val = "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:";
            val += "\n\n";
            val += "1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...";
            val += "\n\n";
            val += "Let us list the factors of the first seven triangle numbers:";
            val += "\n\n";
            val += "1: 1\n3: 1,3\n6: 1,2,3,6\n10: 1,2,5,10\n15: 1,3,5,15\n21: 1,3,7,21\n28: 1,2,4,7,14,28";
            val += "\n\n";
            val += "We can see that 28 is the first triangle number to have over five divisors.";
            val += "\n\n";
            val += "What is the value of the first triangle number to have over five hundred divisors?";
            return val;
        }

        public string Answer() {
            int i= 1, triangle, divisors = 0;

            Stopwatch sw = new Stopwatch();
            sw.Start();

            do {
                i++;
                triangle = i;

                for (int n = 1; n < i; n++ ) {
                    triangle += n;
                }

                divisors = divisorCount(triangle);
            } while (divisors <= 500);

            sw.Stop();
            return globalMethods.DisplayAnswer(triangle.ToString(), sw);
        }

        private static int divisorCount(int n) {
            List<int> nDivisors = globalMethods.divisors(n);
            return nDivisors.Count;
        }
    }
}
